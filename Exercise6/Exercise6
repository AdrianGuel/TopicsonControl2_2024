% Ball rolling from an unstable peak in 3D with animation
% This simulation uses a smooth function to represent the terrain
% and animates the ball's motion due to gravitational forces

clearvars;

% Define simulation parameters
g = 9.81;       % Gravitational acceleration (m/s^2)
m = 0.1;        % Mass of the ball (kg)
tmax = 10;      % Maximum simulation time (s)
dt = 0.01;      % Time step (s)
damping = 0.1;  % Damping coefficient (friction)

% Create a smooth peak/valley function
% z = -a*(x^2 + y^2) + b*exp(-c*(x^2 + y^2))
% This creates a smooth peak that transitions to a valley
a = 0.01;        % Bowl curvature
b = 10;         % Peak height
c = 0.05;        % Peak width control

pa = 10; %plotting area
gd = 100; %grid divisions

% Lyapunov stability parameters
epsilon = 5;   % Radio de estabilidad de Lyapunov

% Initial conditions - start near the unstable peak with small perturbation
x0 = 0;         % Initial x position (m)
y0 = -10;        % Initial y position (m)
vx0 = -1;       % Initial x velocity (m/s)
vy0 = 23;       % Initial y velocity (m/s)

% Function that defines the surface height z(x,y)
terrain = @(x, y) -a*(x.^2 + y.^2) + b*exp(-c*(x.^2 + y.^2));

% Partial derivatives for calculating forces
dz_dx = @(x, y) -2*a*x - 2*c*b*x.*exp(-c*(x.^2 + y.^2));
dz_dy = @(x, y) -2*a*y - 2*c*b*y.*exp(-c*(x.^2 + y.^2));

% Create state vector [x, y, vx, vy]
state = [x0; y0; vx0; vy0];


% Preallocate arrays for storing simulation results
steps = round(tmax/dt);
t_array = zeros(1, steps);
x_array = zeros(1, steps);
y_array = zeros(1, steps);
z_array = zeros(1, steps);
vx_array = zeros(1, steps);
vy_array = zeros(1, steps);

% Store initial conditions
t_array(1) = 0;
x_array(1) = x0;
y_array(1) = y0;
z_array(1) = terrain(x0, y0);
vx_array(1) = vx0;
vy_array(1) = vy0;

% Compute the gradient components (partial derivatives)
[xx, yy] = meshgrid(linspace(-pa, pa, 20),linspace(-pa, pa, 20));
zz = terrain(xx, yy);
U = -dz_dx(xx, yy);
V = -dz_dy(xx, yy);

% Create meshgrid for plotting the terrain surface
[X, Y] = meshgrid(linspace(-pa, pa, gd), linspace(-pa, pa, gd));
Z = terrain(X, Y);

% Añadir círculo de Lyapunov
theta = linspace(0, 2*pi, 50);
x_lyap = epsilon * cos(theta);
y_lyap = epsilon * sin(theta);
z_lyap = terrain(x_lyap, y_lyap)+0.1;

% Run simulation using Euler method
for i = 1:steps
    % Current state
    x = state(1);
    y = state(2);
    vx = state(3);
    vy = state(4);

    % Calculate forces based on the slope of the terrain
    Fx = -m * g * dz_dx(x, y) - damping * vx;
    Fy = -m * g * dz_dy(x, y) - damping * vy;

    % Calculate accelerations
    ax = Fx / m;
    ay = Fy / m;

    % Update state using Euler integration
    state = state + dt * [vx; vy; ax; ay];

    % Store results
    t_array(i) = (i-1) * dt;
    x_array(i) = state(1);
    y_array(i) = state(2);
    z_array(i) = terrain(state(1), state(2));
    vx_array(i) = state(3);
    vy_array(i) = state(4);
end

% Create figure for the 3D animation
fig = figure();
% Subplot 1 - Vista 3D original
subplot(1,2,1);
h_surf1 = surf(X, Y, Z, 'EdgeColor', 'none', 'FaceAlpha', 0.7);
hold on;
quiver3(xx, yy, zz, U, V, zeros(size(U)), 0.5, 'k', 'LineWidth', 0.25);
h_path1 = plot3(x_array, y_array, z_array, 'r-', 'LineWidth', 1.5);
h_ball1 = plot3(x_array(1), y_array(1), z_array(1), 'ro', 'MarkerSize', 10, 'MarkerFaceColor', 'y');
h_lyap1 = plot3(x_lyap, y_lyap, z_lyap, 'm', 'LineWidth', 2);
colormap('winter');
title('Vista 3D', 'FontSize', 14);
xlabel('X'); ylabel('Y'); zlabel('Z');
grid on; axis([-10 10 -10 10 -10 10]);
view(30, 55);

% Subplot 2 - Vista superior
subplot(1,2,2);
h_surf2 = surf(X, Y, Z, 'EdgeColor', 'none', 'FaceAlpha', 0.7);
hold on;
quiver3(xx, yy, zz, U, V, zeros(size(U)), 0.5, 'k', 'LineWidth', 0.25);
h_path2 = plot3(x_array, y_array, z_array, 'r-', 'LineWidth', 1.5);
h_ball2 = plot3(x_array(1), y_array(1), z_array(1), 'ro', 'MarkerSize', 10, 'MarkerFaceColor', 'y');
h_lyap2 = plot3(x_lyap, y_lyap, z_lyap, 'm', 'LineWidth', 2);
colormap('winter');
title('Vista Superior (Top-Down)', 'FontSize', 14);
xlabel('X'); ylabel('Y'); zlabel('Z');
grid on; axis([-10 10 -10 10 -10 10]);
view(0, 90);  % Vista superior

% Animation settings
animation_step = 3;  % Update animation every N simulation steps
pause_time = 0.01;  % Pause time between animation frames

while ishandle(fig)
  for i = 1:animation_step:steps
    % Salir si se cierra la ventana
    if ~ishandle(fig), break; end
    % Actualizar ambos subplots
    for sp = 1:2
      subplot(1,2,sp);
      set(eval(['h_ball' num2str(sp)]), 'XData', x_array(i), 'YData', y_array(i), 'ZData', z_array(i)+0.2);
      trail_length = 1000;
      start_idx = max(1, i - trail_length);
      set(eval(['h_path' num2str(sp)]), 'XData', x_array(start_idx:i), 'YData', y_array(start_idx:i), 'ZData', z_array(start_idx:i)+0.1);
    end

    title(subplot(1,2,1), sprintf('Ball Rolling from Unstable Peak (t = %.2f s)', t_array(i)));

    drawnow;
    pause(pause_time);
  end
end
